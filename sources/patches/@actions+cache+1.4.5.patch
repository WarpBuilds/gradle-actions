diff --git a/node_modules/@actions/cache/lib/cache.d.ts b/node_modules/@actions/cache/lib/cache.d.ts
index 29aabbd..76724a9 100644
--- a/node_modules/@actions/cache/lib/cache.d.ts
+++ b/node_modules/@actions/cache/lib/cache.d.ts
@@ -22,7 +22,7 @@ export declare function isFeatureAvailable(): boolean;
  * @param enableCrossArchArchive an optional boolean enabled to restore cache created on any arch
  * @returns string returns the key for the cache hit, otherwise returns undefined
  */
-export declare function restoreCache(paths: string[], primaryKey: string, restoreKeys?: string[], options?: DownloadOptions, enableCrossOsArchive?: boolean, enableCrossArchArchive?: boolean): Promise<string | undefined>;
+export declare function restoreCache(paths: string[], primaryKey: string, restoreKeys?: string[], options?: DownloadOptions, enableCrossOsArchive?: boolean, enableCrossArchArchive?: boolean): Promise<CacheEntry | undefined>;
 /**
  * Saves a list of files with the specified key
  *
@@ -32,9 +32,17 @@ export declare function restoreCache(paths: string[], primaryKey: string, restor
  * @param enableCrossArchArchive an optional boolean enabled to save cache on any arch which could be restored on any arch
  * @returns string returns cacheId if the cache was saved successfully and throws an error if save fails
  */
-export declare function saveCache(paths: string[], key: string, enableCrossOsArchive?: boolean, enableCrossArchArchive?: boolean): Promise<string>;
+export declare function saveCache(paths: string[], key: string, enableCrossOsArchive?: boolean, enableCrossArchArchive?: boolean): Promise<CacheEntry>;
 /**
  * Deletes an entire cache by cache key.
  * @param key The cache keys
  */
 export declare function deleteCache(paths: string[], key: string, enableCrossOsArchive?: boolean, enableCrossArchArchive?: boolean): Promise<void>;
+
+// PATCHED: Add `CacheEntry` as return type for save/restore functions
+// This allows us to track and report on cache entry sizes.
+export declare class CacheEntry {
+    key: string;
+    size?: number;
+    constructor(key: string, size?: number);
+}
diff --git a/node_modules/@actions/cache/lib/cache.js b/node_modules/@actions/cache/lib/cache.js
index af64009..62b28e3 100644
--- a/node_modules/@actions/cache/lib/cache.js
+++ b/node_modules/@actions/cache/lib/cache.js
@@ -121,6 +121,7 @@ function restoreCache(paths, primaryKey, restoreKeys, options, enableCrossOsArch
             archivePath = path.join(yield utils.createTempDirectory(), utils.getCacheFileName(compressionMethod));
             core.debug(`Archive Path: ${archivePath}`);
             const cacheKey = (_b = (_a = cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.cache_entry) === null || _a === void 0 ? void 0 : _a.cache_user_given_key) !== null && _b !== void 0 ? _b : primaryKey;
+            let archiveFileSize = 0;
             switch (cacheEntry.provider) {
                 case 's3':
                 case 'r2': {
@@ -141,7 +142,7 @@ function restoreCache(paths, primaryKey, restoreKeys, options, enableCrossOsArch
                     if (core.isDebug()) {
                         yield (0, tar_1.listTar)(archivePath, compressionMethod);
                     }
-                    const archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
+                    archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
                     core.info(`Cache Size: ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B)`);
                     yield (0, tar_1.extractTar)(archivePath, compressionMethod);
                     core.info('Cache restored successfully');
@@ -197,7 +198,7 @@ function restoreCache(paths, primaryKey, restoreKeys, options, enableCrossOsArch
                         if (core.isDebug()) {
                             yield (0, tar_1.listTar)(archivePath, compressionMethod);
                         }
-                        const archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
+                        archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
                         core.info(`Cache Size: ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B)`);
                         yield (0, tar_1.extractTar)(archivePath, compressionMethod);
                     }
@@ -222,14 +223,14 @@ function restoreCache(paths, primaryKey, restoreKeys, options, enableCrossOsArch
                     if (core.isDebug()) {
                         yield (0, tar_1.listTar)(archivePath, compressionMethod);
                     }
-                    const archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
+                    archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
                     core.info(`Cache Size: ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B)`);
                     yield (0, tar_1.extractTar)(archivePath, compressionMethod);
                     core.info('Cache restored successfully');
                     break;
                 }
             }
-            return cacheKey;
+            return new CacheEntry(cacheKey, archiveFileSize);
         }
         catch (error) {
             const typedError = error;
@@ -278,6 +279,7 @@ function saveCache(paths, key, enableCrossOsArchive = false, enableCrossArchArch
         }
         const archiveFolder = yield utils.createTempDirectory();
         const archivePath = path.join(archiveFolder, utils.getCacheFileName(compressionMethod));
+        let archiveFileSize = 0;
         core.debug(`Archive Path: ${archivePath}`);
         try {
             yield (0, tar_1.createTar)(archiveFolder, cachePaths, compressionMethod);
@@ -285,7 +287,7 @@ function saveCache(paths, key, enableCrossOsArchive = false, enableCrossArchArch
                 yield (0, tar_1.listTar)(archivePath, compressionMethod);
             }
             const fileSizeLimit = 1000 * 1024 * 1024 * 1024; // 1000GB per repo limit
-            const archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
+            archiveFileSize = utils.getArchiveFileSizeInBytes(archivePath);
             core.debug(`File Size: ${archiveFileSize}`);
             if (archiveFileSize > fileSizeLimit) {
                 throw new Error(`Cache size of ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B) is over the 1000GB limit, not saving cache.`);
@@ -348,7 +350,7 @@ function saveCache(paths, key, enableCrossOsArchive = false, enableCrossArchArch
                 core.debug(`Failed to delete archive: ${error}`);
             }
         }
-        return cacheKey;
+        return new CacheEntry(cacheKey, archiveFileSize);
     });
 }
 exports.saveCache = saveCache;
@@ -372,4 +374,10 @@ function deleteCache(paths, key, enableCrossOsArchive = false, enableCrossArchAr
     });
 }
 exports.deleteCache = deleteCache;
+class CacheEntry {
+    constructor(key, size) {
+        this.key = key;
+        this.size = size;
+    }
+}
 //# sourceMappingURL=cache.js.map
\ No newline at end of file
